.\"#############################################################################
.\"$Id: cerebro_module_devel.3.in,v 1.31 2010-02-04 23:50:50 chu11 Exp $
.\"#############################################################################
.\"  Copyright (C) 2007-2018 Lawrence Livermore National Security, LLC.
.\"  Copyright (C) 2005-2007 The Regents of the University of California.
.\"  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
.\"  Written by Albert Chu <chu11@llnl.gov>.
.\"  UCRL-CODE-155989 All rights reserved.
.\"
.\"  This file is part of Cerebro, a collection of cluster monitoring tools
.\"  and libraries.  For details, see <http://www.llnl.gov/linux/cerebro/>.
.\"
.\"  Cerebro is free software; you can redistribute it and/or modify it under
.\"  the terms of the GNU General Public License as published by the Free
.\"  Software Foundation; either version 2 of the License, or (at your option)
.\"  any later version.
.\"
.\"  Cerebro is distributed in the hope that it will be useful, but WITHOUT ANY
.\"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
.\"  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
.\"  details.
.\"
.\"  You should have received a copy of the GNU General Public License along
.\"  with Cerebro.  If not, see <http://www.gnu.org/licenses/>.
.\"#############################################################################
.TH CEREBRO_MODULE_DEVEL 3 "May 2005" "LLNL" "CEREBRO_MODULE_DEVEL"
.SH "NAME"
cerebro_module_devel \- Introduction to writing cerebro modules
.SH "SYNOPSIS"
.B #include <cerebro/cerebro_clusterlist_module.h>
.sp
.B #include <cerebro/cerebro_config.h>
.sp
.B #include <cerebro/cerebro_config_module.h>
.sp
.B #include <cerebro/cerebro_event_module.h>
.sp
.B #include <cerebro/cerebro_metric_module.h>
.sp
.B #include <cerebro/cerebro_monitor_module.h>
.sp
.B #include <cerebro/cerebro_constants.h>
.sp
.B #include <cerebro/cerebro_error.h>
.sp
.BI "void cerebro_err_debug(const char *fmt, ...);"
.br
.SH "DESCRIPTION"
Additional information about the development of cerebro clusterlist
and config modules can be found below.

Module writers should use \fBcerebro_err_debug\fR when debugging
information is output.

.SH "CLUSTERLIST MODULES"
A cerebro clusterlist module of the name 'foobar' can be written by
compiling a shared object library with the filename
cerebro_clusterlist_foobar.so, and installing it in the cerebro
package library directory @CEREBRO_MODULE_DIR@.

The clusterlist module should define a structure of the following
type:

.nf
struct cerebro_clusterlist_module_info {
.in +2
  char *clusterlist_module_name;
  Cerebro_clusterlist_interface_version interface_version;
  Cerebro_clusterlist_setup setup;
  Cerebro_clusterlist_cleanup cleanup;
  Cerebro_clusterlist_numnodes numnodes;
  Cerebro_clusterlist_get_all_nodes get_all_nodes;
  Cerebro_clusterlist_node_in_cluster node_in_cluster;
  Cerebro_clusterlist_get_nodename get_nodename;
.in -2
};
.fi

The structure should be named 'clusterlist_module_info' and be populated
with the following information.

The field 'clusterlist_module_name' should indicate the name of the
clusterlist module.

The field 'interface_version' should point to a function of the
following type:

typedef int (*Cerebro_clusterlist_interface_version)(void);

The 'interface_version' function should return the interface version
number in the macro CEREBRO_CLUSTERLIST_INTERFACE_VERSION.

The field 'setup' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_setup)(void);

The 'setup' function sets up the clusterlist module with whatever
initialization is necessary.  It returns 0 on success, -1 on error.

The field 'cleanup' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_cleanup)(void);

The 'cleanup' function cleans up the clusterlist module from earlier
initializations.  It returns 0 on success, -1 on error.

The field 'numnodes' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_numnodes)(void);

The 'numnodes' function returns the number of nodes in the
cluster, or -1 on error.

The field 'get_all_nodes' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_get_all_nodes)(char ***nodes);

The 'get_all_nodes' function retrieves a list of nodes in the cluster.
The caller is responsible for freeing the created char ** array of
nodes.  The returned array of strings should be NULL
terminated. Returns the number of cluster nodes retrieved on success,
-1 on error.

The field 'node_in_cluster' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_node_in_cluster)(const char *node);

The 'node_in_cluster' function is passed a nodename.  It returns 1 if
the specified node is in the cluster, 0 if not, and -1 on error.

The field 'get_nodename' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_get_nodename)(const char *node, char *buf, unsigned int buflen);

The 'get_nodename' function is passed a nodename, a buffer, and a
buffer length.  It determines the appropriate nodename to use and
copies it into the buffer.  This function is primarily used to convert
aliased nodenames into the appropriate nodename to use for
calculations.  The majority of clusterlist module writers will
probably copy the nodename directly into the buffer and not do any
calculations.  'get_nodename' returns 0 on success, -1 on error.

All of the above functions must be defined in the module and listed in
the 'clusterlist_module_info' structure.

.SH "CONFIG MODULES"
A cerebro config module of the name 'foobar' can be written by
compiling a shared object library with the filename
cerebro_config_foobar.so, and installing it in the cerebro package
library directory  @CEREBRO_MODULE_DIR@.

The config module should define a structure of the following
type:

.nf
struct cerebro_config_module_info {
.in +2
  char *config_module_name;
  Cerebro_config_interface_version interface_version;
  Cerebro_config_setup setup;
  Cerebro_config_cleanup cleanup;
  Cerebro_config_load_default load_default;
.in -2
};
.fi

The structure should be named 'config_module_info' and be populated
with the following information.

The field 'config_module_name' should indicate the name of the
config module.

The field 'interface_version' should point to a function of the
following type:

typedef int (*Cerebro_config_interface_version)(void);

The 'interface_version' function should return the interface version
number in the macro CEREBRO_CONFIG_INTERFACE_VERSION.

The field 'setup' should point to a function of the following type:

typedef int (*Cerebro_config_setup)(void);

The 'setup' function sets up the config module with whatever
initialization is necessary.  It returns 0 on success, -1 on error.

The field 'cleanup' should point to a function of the following type:

typedef int (*Cerebro_config_cleanup)(void);

The 'cleanup' function cleans up the config module from earlier
initializations.  It returns 0 on success, -1 on error.

The field 'load_default' should point to a function of the following
type:

typedef int (*Cerebro_config_load_default)(struct cerebro_config *conf);

The 'load_default' function loads an alternate set of configuration
values and stores them within the configuration structure passed in.

All of the above functions must be defined in the module and listed in
the 'config_module_info' structure.

The structure cerebro_config is defined as:

.nf
struct cerebro_config {
.in +2
  /*
   * Libcerebro configuration
   */
  struct cerebro_config_server cerebro_metric_server[CEREBRO_CONFIG_CEREBRO_METRIC_SERVERS_MAX];
  int cerebro_metric_server_len;
  int cerebro_metric_server_flag;
  struct cerebro_config_server cerebro_event_server[CEREBRO_CONFIG_CEREBRO_EVENT_SERVERS_MAX];
  int cerebro_event_server_len;
  int cerebro_event_server_flag;
  unsigned int cerebro_timeout_len;
  int cerebro_timeout_len_flag;
  int cerebro_flags;
  int cerebro_flags_flag;

  /*
   * Cerebrod configuration
   */
  unsigned int cerebrod_heartbeat_frequency_min;
  unsigned int cerebrod_heartbeat_frequency_max;
  int cerebrod_heartbeat_frequency_flag;
  int cerebrod_speak;
  int cerebrod_speak_flag;
  struct cerebrod_config_speak_message_config cerebrod_speak_message_config[CEREBRO_CONFIG_SPEAK_MESSAGE_CONFIG_MAX];
  int cerebrod_speak_message_config_len;
  int cerebrod_speak_message_config_flag;
  int cerebrod_speak_message_ttl;
  int cerebrod_speak_message_ttl_flag;
  int cerebrod_listen;
  int cerebrod_listen_flag;
  int cerebrod_listen_threads;
  int cerebrod_listen_threads_flag;
  struct cerebrod_config_listen_message_config cerebrod_listen_message_config[CEREBRO_CONFIG_LISTEN_MESSAGE_CONFIG_MAX];
  int cerebrod_listen_message_config_len;
  int cerebrod_listen_message_config_flag;
  int cerebrod_metric_controller;
  int cerebrod_metric_controller_flag;
  int cerebrod_metric_server;
  int cerebrod_metric_server_flag;
  int cerebrod_metric_server_port;
  int cerebrod_metric_server_port_flag;
  int cerebrod_event_server;
  int cerebrod_event_server_flag;
  int cerebrod_event_server_port;
  int cerebrod_event_server_port_flag;
  struct cerebrod_config_forward_message_config cerebrod_forward_message_config[CEREBRO_CONFIG_FORWARD_MESSAGE_CONFIG_MAX];
  int cerebrod_forward_message_config_len;
  int cerebrod_forward_message_config_flag;
  int cerebrod_forward_message_ttl;
  int cerebrod_forward_message_ttl_flag;
  char cerebrod_forward_host_accept[CEREBRO_CONFIG_FORWARD_HOST_ACCEPT_MAX][CEREBRO_CONFIG_HOST_INPUT_MAX+1];
  int cerebrod_forward_host_accept_len;
  int cerebrod_forward_host_accept_flag;

.if @MANPAGE_DEBUG@ \{
  int cerebrod_speak_debug;
  int cerebrod_speak_debug_flag;
  int cerebrod_listen_debug;
  int cerebrod_listen_debug_flag;
  int cerebrod_metric_controller_debug;
  int cerebrod_metric_controller_debug_flag;
  int cerebrod_metric_server_debug;
  int cerebrod_metric_server_debug_flag;
  int cerebrod_event_server_debug;
  int cerebrod_event_server_debug_flag;
  char cerebrod_alternate_hostname[CEREBRO_MAX_HOSTNAME_LEN+1];
  int cerebrod_alternate_hostname_flag;
\}
.in -2
};
.fi

The 'cerebro_metric_server' field should store an array of default
metric servers for the libcerebro API should attempt to connect to.

The 'cerebro_event_server' field should store an array of default
event servers for the libcerebro API should attempt to connect to.

The 'cerebro_timeout_len' field should store the default timeout
length the libcerebro API should use to evaluate up vs. down nodes.

The 'cerebro_flags' field should store the default flags the
libcerebro API should use.

The 'cerebrod_heartbeat_frequency_min' and
 'cerebrod_heartbeat_frequency_max' fields store the minimum and
maximum heartbeat frequency for
.BR cerebrod(8).

The 'cerebrod_speak' field is a boolean that turns on the 
.BR cerebrod(8)
speaker to send out message packets.

The 'cerebrod_speak_message_config' field should store an array of
destinations 
.BR cerebrod(8)
messages should be to.

The 'cerebrod_speak_message_ttl' field stores the message time to live
for message packets multicast from
.BR cerebrod(8).

The 'cerebrod_listen' field is a boolean that turns on the
.BR cerebrod(8)
listener to receive message packets.

The 'cerebrod_listen_threads' field stores the number of listener
threads that should be created in
.BR cerebrod(8).

The 'cerebrod_listen_message_config' field should store an array of
message destinations 
.BR cerebrod(8)
should be listening on.

The 'cerebrod_metric_controller' field is a boolean that turns on the
.BR cerebrod(8)
metric controller to receive metric control requests.

The 'cerebrod_metric_server' field is a boolean that turns on the
.BR cerebrod(8)
metric server to receive metric data requests.

The 'cerebrod_metric_server_port' field stores the metric server
port for 
.BR cerebrod(8).

The 'cerebrod_event_server' field is a boolean that turns on the
.BR cerebrod(8)
event server to receive event data requests.

The 'cerebrod_event_server_port' field stores the event server
port for 
.BR cerebrod(8).

The 'cerebrod_forward_message_config' field should store an array of
message destinations
.BR cerebrod(8)
should forward to.

The 'cerebrod_forward_message_ttl' field stores the message time to live
for forwarded message packets multicast from
.BR cerebrod(8).

The 'cerebrod_forward_host_accept' field stores the non-cluster hosts
.BR cerebrod(8)
should accept.

.if @MANPAGE_DEBUG@ \{

The 'cerebrod_speak_debug' field is a boolean that turns on speaker
debugging for 
.BR cerebrod.

The 'cerebrod_listen_debug' field is a boolean that turns on listener
debugging for
.BR cerebrod.

The 'cerebrod_metric_controller_debug' field is a boolean that turns on
metric controller debugging for
.BR cerebrod.

The 'cerebrod_metric_server_debug' field is a boolean that turns on
metric server debugging for
.BR cerebrod.

The 'cerebrod_event_server_debug' field is a boolean that turns on
event server debugging for
.BR cerebrod.

The 'cerebrod_alternate_hostname' field is a string that specifies
an alternate hostname 
.BR cerebrod
should assume for testing purposes.
\}

Any parameter that is set in the configuration structure must have its
respective flag set.  Any array parameter must also have the appropriately
array length parameter set.

.SH "METRIC MODULES"
A cerebro metric module of the name 'foobar' can be written by
compiling a shared object library with the filename
cerebro_metric_foobar.so, and installing it in the cerebro
package library directory @CEREBRO_MODULE_DIR@.

The metric module should define a structure of the following
type:

.nf
struct cerebro_metric_module_info {
.in +2
  char *metric_module_name;
  Cerebro_metric_interface_version interface_version;
  Cerebro_metric_setup setup;
  Cerebro_metric_cleanup cleanup;
  Cerebro_metric_get_metric_name get_metric_name;
  Cerebro_metric_get_metric_period get_metric_period;
  Cerebro_metric_get_metric_flags get_metric_flags;
  Cerebro_metric_get_metric_value get_metric_value;
  Cerebro_metric_destroy_metric_value destroy_metric_value;
  Cerebro_metric_get_metric_thread get_metric_thread;
  Cerebro_metric_send_message_function_pointer send_message_function_pointer;
.in -2
};
.fi

The structure should be named 'metric_module_info' and be populated
with the following information.

The field 'metric_module_name' should indicate the name of the
metric module.

The field 'interface_version' should point to a function of the
following type:

typedef int (*Cerebro_metric_interface_version)(void);

The 'interface_version' function should return the interface version
number in the macro CEREBRO_METRIC_INTERFACE_VERSION.

The field 'setup' should point to a function of the following type:

typedef int (*Cerebro_metric_setup)(void);

The 'setup' function sets up the metric module with whatever
initialization is necessary.  It returns 0 on success, -1 on error.

The field 'cleanup' should point to a function of the following type:

typedef int (*Cerebro_metric_cleanup)(void);

The 'cleanup' function cleans up the metric module from earlier
initializations.  It returns 0 on success, -1 on error.

The field 'get_metric_name' should point to a function of the following type:

typedef char *(*Cerebro_metric_get_metric_name)(void);

The 'get_metric_name' function returns the name of the metric to be
monitored, or NULL on error.

The field 'get_metric_period' should point to a function of the following type:

typedef int (*Cerebro_metric_get_metric_period)(int *period);

The 'get_metric_period' function retrieves the period in seconds that
the metric value should be read and propagated.  If the period is 0,
the metric will be read and propagated with every cerebrod heartbeat.
If the period is < 0, the metric will not be propagated and it is the
responsibility of the module to propagate data via the
 'send_message' function specified below.  If the SEND_ON_PERIOD flag
is not set below, the period will not be precise.  Data will only be
piggy-backed on cerebro heartbeats, therefore the granularity of the
period will be related to the cerebro heartbeat period.  This tradeoff
decreases metric time accuracy but decreases CPU interruption.  It
returns 0 on success, -1 on error.

The field 'get_metric_flags' should point to a function of the following type:

typedef int (*Cerebro_metric_get_metric_flags)(int *flags);

The 'get_metric_flags' function retrieves the flags that indicate slightly
different behavior that this module may have.  The flags that can be set are:

CEREBRO_METRIC_MODULE_FLAGS_SEND_ON_PERIOD - Do not send the metric
value with the cerebrod message.  Send it in its only packet exactly
on its period.  If this flag is set, the period specified by this module
must be > 0.

This function returns 0 on success, -1 on error.

The field 'get_metric_value' should point to a function of the following type:

typedef int (*Cerebro_metric_get_metric_value)(unsigned int *metric_value_type, unsigned int *metric_value_len, void **metric_value);

The 'get_metric_value' function retrieves the value of the metric as
well as the type and length.  If it is necessary, it is the
responsibility of 'get_metric_value' to allocate an appropriate amount
of memory for the returned value.  Returns the 0 on success, -1 on
error.

The field 'destroy_metric_value' should point to a function of the following type:

typedef int (*Cerebro_metric_destroy_metric_value)(void *metric_value);

The 'destroy_metric_value' function is passed the metric value pointer
received from 'get_metric_value'.  If necessary,
 'destroy_metric_value' should free allocated memory.  Returns 0 on
success, -1 on error.

The field 'get_metric_thread' should point to a function of the following type:

typedef Cerebro_metric_thread_pointer (*Cerebro_metric_get_metric_thread)(void);

The 'get_metric_thread' function returns a pointer of type:

typedef void *(*Cerebro_metric_thread_pointer)(void *arg);

which will be executed as a detached thread.  

This thread can perform any metric monitoring duties it pleases.
Typically the thread is used to watch or monitor for some event and
periodically send cerebrod messages by calling the 'send_message'
function below.

If no detached thread is required to be executed by this module, NULL
should be returned.

If the 
.B cerebrod
daemon was built without threads, the 'get_metric_thread' function will
never be called.

The field 'send_message_function_pointer' should point to a function of the following type:

typedef int (*Cerebro_metric_send_message_function_pointer)(Cerebro_metric_send_message function_pointer);

The 'send_message_function_pointer' receives a pointer of the type:

typedef int (*Cerebro_metric_send_message)(struct cerebrod_message *hb);

The pointer will allow the metric module to send a cerebrod message.

All of the above functions must be defined in the module and listed in
the 'metric_module_info' structure.

.SH "MONITOR MODULES"
A cerebro monitor module of the name 'foobar' can be written by
compiling a shared object library with the filename
cerebro_monitor_foobar.so, and installing it in the cerebro
package library directory @CEREBRO_MODULE_DIR@.

The monitor module should define a structure of the following
type:

.nf
struct cerebro_monitor_module_info {
.in +2
  char *monitor_module_name;
  Cerebro_monitor_interface_version interface_version;
  Cerebro_monitor_setup setup;
  Cerebro_monitor_cleanup cleanup;
  Cerebro_monitor_metric_name metric_name;
  Cerebro_monitor_metric_update metric_update;
.in -2
};
.fi

The structure should be named 'monitor_module_info' and be populated
with the following information.

The field 'monitor_module_name' should indicate the name of the
monitor module.

The field 'interface_version' should point to a function of the
following type:

typedef int (*Cerebro_monitor_interface_version)(void);

The 'interface_version' function should return the interface version
number in the macro CEREBRO_MONITOR_INTERFACE_VERSION.

The field 'setup' should point to a function of the following type:

typedef int (*Cerebro_monitor_setup)(void);

The 'setup' function sets up the monitor module with whatever
initialization is necessary.  It returns 0 on success, -1 on error.

The field 'cleanup' should point to a function of the following type:

typedef int (*Cerebro_monitor_cleanup)(void);

The 'cleanup' function cleans up the monitor module from earlier
initializations.  It returns 0 on success, -1 on error.

The field 'metric_names' should point to a function of the following type:

typedef char *(*Cerebro_monitor_metric_names)(void);

The 'metric_names' function returns the name(s) of the metric(s) the module
wishes to monitor, or NULL on error.  Multiple metrics are comma separated.

The field 'metric_update' should point to a function of the following type:

typedef int (*Cerebro_monitor_metric_update)(const char *nodename, unsigned int metric_value_type, unsigned int metric_value_len, void *metric_value);

The 'metric_update' function is called whenever the metric is received from a node.
The nodename the metric was received from, metric value type, metric value length, and metric value are passed in as arguments.  
Returns the 0 on success, -1 on error.

All of the above functions must be defined in the module and listed in
the 'monitor_module_info' structure.

.SH "EVENT MODULES"
A cerebro event module of the name 'foobar' can be written by
compiling a shared object library with the filename
cerebro_event_foobar.so, and installing it in the cerebro
package library directory @CEREBRO_MODULE_DIR@.

The event module should define a structure of the following
type:

.nf
struct cerebro_event_module_info {
.in +2
  char *event_module_name;
  Cerebro_event_interface_version interface_version;
  Cerebro_event_setup setup;
  Cerebro_event_cleanup cleanup;
  Cerebro_event_event_names event_names;
  Cerebro_event_metric_names metric_names;
  Cerebro_event_timeout_length timeout_length;
  Cerebro_event_node_timeout node_timeout;
  Cerebro_event_metric_update metric_update;
  Cerebro_event_destroy destroy;
.in -2
};
.fi

The structure should be named 'event_module_info' and be populated
with the following information.

The field 'event_module_name' should indicate the name of the
event module.

The field 'interface_version' should point to a function of the
following type:

typedef int (*Cerebro_event_interface_version)(void);

The 'interface_version' function should return the interface version
number in the macro CEREBRO_EVENT_INTERFACE_VERSION.

The field 'setup' should point to a function of the following type:

typedef int (*Cerebro_event_setup)(void);

The 'setup' function sets up the event module with whatever
initialization is necessary.  It returns 0 on success, -1 on error.

The field 'cleanup' should point to a function of the following type:

typedef int (*Cerebro_event_cleanup)(void);

The 'cleanup' function cleans up the event module from earlier
initializations.  It returns 0 on success, -1 on error.

The field 'event_names' should point to a function of the following type:

typedef char *(*Cerebro_event_event_names)(void);

The 'event_names' function returns the name(s) of the event(s) the
module can generate.  NULL is returned on error.  Multiple events are
comma separated.

The field 'metric_names' should point to a function of the following type:

typedef char *(*Cerebro_event_metric_names)(void);

The 'metric_names' function returns the name(s) of the metric(s) the
module should be sent to know if it should generate an event.  NULL is
returned on error.  Multiple metrics are comma separated.

The field 'timeout_length' should point to a function of the following type:

typedef int (*Cerebro_event_timeout_length)(void);

The 'timeout_length' function returns the timeout length in seconds the
module wishes to be notified if a node times out.  Returns 0 if a
timeout notification is not desired.

The field 'node_timeout' should point to a function of the following type:

typedef int (*Cerebro_event_node_timeout)(const char *nodename,
                                          struct cerebro_event **event);

The 'node_timeout' function is called when a node timeout occurs.  If
it wishes to generate an event, it should fill in the appropriate
event structure.  Returns 1 if an event is generated, 0 if not, -1 on
error.

The field 'metric_update' should point to a function of the following type:

typedef int (*Cerebro_event_metric_update)(const char *nodename,
                                           const char *metric_name,
                                           unsigned int metric_value_type,
                                           unsigned int metric_value_len,
                                           void *metric_value,
                                           struct cerebro_event **event);

The 'metric_update' function is called whenever the metric is received
from a node.  The nodename the metric was received from, metric value
type, metric value length, and metric value are passed in as arguments
and an event is generated if needed.  Returns 1 if an event is
generated, 0 if not, -1 on error.

The field 'destroy' should point to a function of the following type:

typedef void (*Cerebro_event_destroy)(struct cerebro_event *event);

The 'destroy' function is called to free any memory generated by
the 'node_timeout' or 'metric_update' functions.

All of the above functions must be defined in the module and listed in
the 'event_module_info' structure.

.SH "SEE ALSO"
libcerebro(3), cerebro_module(3), cerebro.conf(5), cerebrod(8)
