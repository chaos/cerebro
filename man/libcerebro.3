.\"#############################################################################
.\"$Id: libcerebro.3,v 1.27 2010-02-02 01:01:20 chu11 Exp $
.\"#############################################################################
.\"  Copyright (C) 2007-2018 Lawrence Livermore National Security, LLC.
.\"  Copyright (C) 2005-2007 The Regents of the University of California.
.\"  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
.\"  Written by Albert Chu <chu11@llnl.gov>.
.\"  UCRL-CODE-155989 All rights reserved.
.\"
.\"  This file is part of Cerebro, a collection of cluster monitoring tools
.\"  and libraries.  For details, see <https://github.com/chaos/cerebro>.
.\"
.\"  Cerebro is free software; you can redistribute it and/or modify it under
.\"  the terms of the GNU General Public License as published by the Free
.\"  Software Foundation; either version 2 of the License, or (at your option)
.\"  any later version.
.\"
.\"  Cerebro is distributed in the hope that it will be useful, but WITHOUT ANY
.\"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
.\"  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
.\"  details.
.\"
.\"  You should have received a copy of the GNU General Public License along
.\"  with Cerebro.  If not, see <http://www.gnu.org/licenses/>.
.\"#############################################################################
.TH LIBCEREBRO 3 "August 2003" "LLNL" "LIBCEREBRO"
.SH "NAME"
libcerebro \- a library of functions to determine if a node is up
or down
.SH "SYNOPSIS"
.B #include <cerebro.h>
.sp
.BI "cerebro_t cerebro_handle_create(void);"
.sp
.BI "int cerebro_handle_destroy(cerebro_t handle);"
.sp
.BI "int cerebro_errnum(cerebro_t handle);"
.sp
.BI "int cerebro_namelist_errnum(cerebro_namelist_t namelist);"
.sp
.BI "int cerebro_namelist_iterator_errnum(cerebro_namelist_iterator_t namelistItr);"
.sp
.BI "int cerebro_nodelist_errnum(cerebro_nodelist_t nodelist);"
.sp
.BI "int cerebro_nodelist_iterator_errnum(cerebro_nodelist_iterator_t handle);"
.sp
.BI "char *cerebro_strerror(int errnum);"
.sp
.BI "char *cerebro_get_hostname(cerebro_t handle);"
.sp
.BI "int cerebro_set_hostname(cerebro_t handle, const char *hostname);"
.sp
.BI "int cerebro_get_port(cerebro_t handle);"
.sp
.BI "int cerebro_set_port(cerebro_t handle, unsigned int port);"
.sp
.BI "int cerebro_get_timeout_len(cerebro_t handle);"
.sp
.BI "int cerebro_set_timeout_len(cerebro_t handle, unsigned int timeout_len);"
.sp
.BI "int cerebro_get_flags(cerebro_t handle);"
.sp
.BI "int cerebro_set_flags(cerebro_t handle, unsigned int flags);"
.sp
.BI "int cerebro_event_register(cerebro_t handle, const char *event_name);"
.sp
.BI "int cerebro_event_unregister(cerebro_t handle, int fd);"
.sp
.BI "int cerebro_event_parse(cerebro_t handle, int fd, char **nodename, unsigned int *event_value_type, unsigned int *event_value_size, void **event_value);"
.sp
.BI "cerebro_namelist_t cerebro_get_metric_names(cerebro_t handle);"
.sp
.BI "cerebro_nodelist_t cerebro_get_metric_data(cerebro_t handle, const char *metric_name);"
.sp
.BI "int cerebro_register_metric(cerebro_t handle, const char *metric_name);"
.sp
.BI "int cerebro_unregister_metric(cerebro_t handle, const char *metric_name);"
.sp
.BI "int cerebro_update_metric_value(cerebro_t handle, const char *metric_name, unsigned int metric_value_type, unsigned int metric_value_len, void *metric_value);"
.sp
.BI "int cerebro_resend_metric(cerebro_t handle, const char *metric_name);"
.sp
.BI "int cerebro_namelist_length(cerebro_namelist_t namelist);"
.sp
.BI "int cerebro_namelist_destroy(cerebro_namelist_t namelist);"
.sp
.BI "cerebro_namelist_iterator_t cerebro_namelist_iterator_create(cerebro_namelist_t namelist);"
.sp
.BI "int cerebro_namelist_iterator_name(cerebro_namelist_iterator_t namelistItr, char **name);"
.sp
.BI "int cerebro_namelist_iterator_next(cerebro_namelist_iterator_t namelistItr);"
.sp
.BI "int cerebro_namelist_iterator_reset(cerebro_namelist_iterator_t namelistItr);"
.sp
.BI "int cerebro_namelist_iterator_at_end(cerebro_namelist_iterator_t namelistItr);"
.sp
.BI "int cerebro_namelist_iterator_destroy(cerebro_namelist_iterator_t namelistItr);"
.sp
.BI "char *cerebro_nodelist_metric_name(cerebro_nodelist_t nodelist);
.sp
.BI "int cerebro_nodelist_length(cerebro_nodelist_t nodelist);
.sp
.BI "int cerebro_nodelist_destroy(cerebro_nodelist_t nodelist);"
.sp
.BI "cerebro_nodelist_iterator_t cerebro_nodelist_iterator_create(cerebro_nodelist_t nodelist);"
.sp
.BI "int cerebro_nodelist_iterator_nodename(cerebro_nodelist_iterator_t nodelistItr, char **nodename);"
.sp
.BI "int cerebro_nodelist_iterator_metric_value(cerebro_nodelist_iterator_t nodelistItr, unsigned int *metric_value_received_time,  unsigned int *metric_value_type, unsigned int *metric_value_len, void **metric_value);"
.sp
.BI "int cerebro_nodelist_iterator_next(cerebro_nodelist_iterator_t nodelistItr);"
.sp
.BI "int cerebro_nodelist_iterator_reset(cerebro_nodelist_iterator_t nodelistItr);"
.sp
.BI "int cerebro_nodelist_iterator_at_end(cerebro_nodelist_iterator_t nodelistItr);"
.sp
.BI "int cerebro_nodelist_iterator_destroy(cerebro_nodelist_iterator_t nodelistItr);"
.br
.SH "DESCRIPTION"
The cerebro library contains functions to gather status information
about a cluster.  Please see
.BR cerebro(7)
for an overview of the
.B Cerebro
system.

For API information, please see the individual manpages for each of
the functions above, or read the comments written in
/usr/include/cerebro.h.  The
.B Cerebro
configuration file, clusterlist module, or configuration module may be
loaded or called during API calls.  Please see the
.BR cerebro.conf(5)
manpage for information about the cerebro configuration file.  Please see
the
.BR cerebro_module(3)
manpage for information on cerebro modules.

.SH "FILES"
/usr/include/cerebro.h
.SH "SEE ALSO"
cerebro_handle_create(3), cerebro_handle_destroy(3),
cerebro_errnum(3), cerebro_namelist_errnum(3),
cerebro_namelist_iterator_errnum(3), cerebro_nodelist_errnum(3),
cerebro_nodelist_iterator_errnum(3), cerebro_strerror(3),
cerebro_get_hostname(3), cerebro_set_hostname(3), cerebro_get_port(3),
cerebro_set_port(3), cerebro_get_timeout_len(3),
cerebro_set_timeout_len(3), cerebro_get_flags(3),
cerebro_set_flags(3), cerebro_get_metric_names(3),
cerebro_get_metric_data(3), cerebro_register_metric(3),
cerebro_unregister_metric(3), cerebro_update_metric_value(3),
cerebro_resend_metric(3), cerebro_namelist_length(3),
cerebro_namelist_destroy(3), cerebro_namelist_iterator_create(3),
cerebro_namelist_iterator_name(3),
cerebro_namelist_iterator_next(3),
cerebro_namelist_iterator_reset(3),
cerebro_namelist_iterator_at_end(3),
cerebro_namelist_iterator_destroy(3),
cerebro_nodelist_metric_name(3), cerebro_nodelist_length(3),
cerebro_nodelist_destroy(3), cerebro_nodelist_iterator_create(3),
cerebro_nodelist_iterator_nodename(3),
cerebro_nodelist_iterator_metric_value(3),
cerebro_nodelist_iterator_next(3), cerebro_nodelist_iterator_reset(3),
cerebro_nodelist_iterator_at_end(3),
cerebro_nodelist_iterator_destroy(3), cerebro_module(3),
cerebro_module_devel(3), cerebro.conf(5), cerebro(7)
